{"version":3,"sources":["../src/async.js"],"names":["readAsync","data","JSON","parse","console","log","name","init","fs","require","readFile","cb","err","readFileAsync","path","resolve","reject","then","catch","co","util","promisify"],"mappings":";;;;;;;;;;;;;;AAqD8C;;sFAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACmBA,UAAU,gBAAV,CADnB;;AAAA;AACMC,gBADN;;AAEEA,mBAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACAG,oBAAQC,GAAR,CAAYJ,KAAKK,IAAjB;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,I;;;;;;;AAtDf;AACA,IAAMC,KAAKC,QAAQ,IAAR,CAAX;;AAEA;AACA;AACA,SAASC,QAAT,CAAkBC,EAAlB,EAAsB;AACpBH,KAAGE,QAAH,CAAY,gBAAZ,EAA8B,UAACE,GAAD,EAAMX,IAAN,EAAe;AAC3C,QAAIW,GAAJ,EAAS,OAAOD,GAAGC,GAAH,CAAP;AACTD,OAAG,IAAH,EAASV,IAAT;AACD,GAHD;AAID;AACD;AACAS,SAAS,UAACE,GAAD,EAAMX,IAAN,EAAe;AACtB,MAAI,CAACW,GAAL,EAAU;AACRX,WAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACAG,YAAQC,GAAR,CAAYJ,KAAKK,IAAjB;AACD;AACF,CALD;;AAQA;AACA;AACA,SAASO,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCR,OAAGE,QAAH,CAAYI,IAAZ,EAAkB,UAACF,GAAD,EAAMX,IAAN,EAAe;AAC/B,UAAIW,GAAJ,EAASI,OAAOJ,GAAP,EAAT,KACKG,QAAQd,IAAR;AACN,KAHD;AAID,GALM,CAAP;AAMD;AACD;AACAY,cAAc,gBAAd,EACGI,IADH,CACQ,gBAAQ;AACZhB,SAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACAG,UAAQC,GAAR,CAAYJ,KAAKK,IAAjB;AACD,CAJH,EAKGY,KALH,CAKS,eAAO;AACZd,UAAQC,GAAR,CAAYO,GAAZ;AACD,CAPH;;AAUA;AACA,IAAMO,KAAKV,QAAQ,IAAR,CAAX;AACA,IAAMW,OAAOX,QAAQ,MAAR,CAAb;AACAU,4CAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACgBC,KAAKC,SAAL,CAAeb,GAAGE,QAAlB,EAA4B,gBAA5B,CADhB;;AAAA;AACGT,cADH;;AAEDA,iBAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACAG,kBAAQC,GAAR,CAAYJ,KAAKK,IAAjB;;AAHC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAH;;AAQA;AACA,IAAMN,YAAYoB,KAAKC,SAAL,CAAeb,GAAGE,QAAlB,CAAlB;AAMAH","file":"async.js","sourcesContent":["// 处理异步函数\nconst fs = require('fs')\n\n// 1.最原始的异步操作 通过回调函数\n// 1.1定义函数\nfunction readFile(cb) {\n  fs.readFile('./package.json', (err, data) => {\n    if (err) return cb(err)\n    cb(null, data)\n  })\n}\n// 1.2调用函数 (传入一个回调函数)\nreadFile((err, data) => {\n  if (!err) {\n    data = JSON.parse(data)\n    console.log(data.name)\n  }\n})\n\n\n// 2.第二个阶段 Promise\n// 2.1定义函数\nfunction readFileAsync(path) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, (err, data) => {\n      if (err) reject(err)\n      else resolve(data)\n    })\n  })\n}\n// 2.2调用函数\nreadFileAsync('./package.json')\n  .then(data => {\n    data = JSON.parse(data)\n    console.log(data.name)\n  })\n  .catch(err => {\n    console.log(err)\n  })\n\n\n// 3.第三个阶段 co + generator函数 +promise\nconst co = require('co')\nconst util = require('util')\nco(function *() {\n  let data = yield util.promisify(fs.readFile)('./package.json')\n  data = JSON.parse(data)\n  console.log(data.name)\n})\n\n\n\n// 4.第四个阶段 Async 一统江湖\nconst readAsync = util.promisify(fs.readFile) // Nodejs 8 有一个新的工具函数util.promisify() 他将一个接收回调函数参数的函数转换成一个返回Promise的函数。\nasync function init() {\n  let data = await readAsync('./package.json')\n  data = JSON.parse(data)\n  console.log(data.name)\n}\ninit()\n\n\n\n\n"]}