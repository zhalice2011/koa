{"version":3,"sources":["../src/iterator.js"],"names":["makeIterator","arr","i","length","gen","console","log","next","value","done"],"mappings":";;;;;;;;sDAiCUA,Y;;AAjCV;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA,SAAUA,YAAV,CAAuBC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACWC,WADX,GACe,CADf;;AAAA;AAAA,gBACkBA,IAAID,IAAIE,MAD1B;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAEUF,IAAIC,CAAJ,CAFV;;AAAA;AACkCA,aADlC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,IAAME,MAAMJ,aAAa,CAAC,IAAD,EAAO,IAAP,EAAa,KAAb,CAAb,CAAZ;AACAK,QAAQC,GAAR,CAAY,KAAZ,EAAmBF,IAAIG,IAAJ,EAAnB;AACAF,QAAQC,GAAR,CAAY,GAAZ,EAAiBF,IAAIG,IAAJ,GAAWC,KAA5B;AACAH,QAAQC,GAAR,CAAY,GAAZ,EAAiBF,IAAIG,IAAJ,GAAWC,KAA5B;AACAH,QAAQC,GAAR,CAAY,GAAZ,EAAiBF,IAAIG,IAAJ,GAAWC,KAA5B;AACAH,QAAQC,GAAR,CAAY,GAAZ,EAAiBF,IAAIG,IAAJ,GAAWE,IAA5B","file":"iterator.js","sourcesContent":["// iterator迭代器\n\n// 1.原始的迭代器生成函数\n\n// function makeIterator(arr) {\n//   let nextIndex = 0\n\n//   // 返回一个迭代器对象\n//   return {\n//     // next方法返回的结果对象\n//     next: () => {\n//       if (nextIndex < arr.length) {\n//         return {\n//           value: arr[nextIndex++],\n//           done: false\n//         }\n//       }else {\n//         return { done: true }\n//       }\n//     }\n//   }\n// }\n\n// const it = makeIterator(['吃饭', '睡觉', '打豆豆'])\n\n// console.log('1', it.next().value)\n// console.log('2', it.next().value)\n// console.log('3', it.next().value)\n// console.log('4', it.next().done)\n\n\n// 2.node中的  *  迭代器生成函数\n\nfunction *makeIterator(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    yield arr[i] // yield 会把当前循环到的这个值给迭代下去\n  }\n}\nconst gen = makeIterator(['吃饭', '睡觉', '打豆豆'])\nconsole.log('all', gen.next())\nconsole.log('1', gen.next().value)\nconsole.log('2', gen.next().value)\nconsole.log('3', gen.next().value)\nconsole.log('4', gen.next().done)\n"]}