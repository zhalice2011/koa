{"version":3,"sources":["../src/cb-promise.js"],"names":["fs","require","util","promisify","readFile","then","JSON","parse","console","log","data","name","catch","err"],"mappings":";;AAAA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;;AAEA;AACAC,KAAKC,SAAL,CAAeH,GAAGI,QAAlB,EAA4B,gBAA5B,EACKC,IADL,CACUC,KAAKC,KADf,EAEKF,IAFL,CAEU,gBAAQ;AACVG,YAAQC,GAAR,CAAYC,KAAKC,IAAjB;AACH,CAJL,EAKKC,KALL,CAKW,eAAO;AACVJ,YAAQC,GAAR,CAAYI,GAAZ;AACH,CAPL","file":"cb-promise.js","sourcesContent":["const fs = require('fs')\n// const Promise = require('bluebird')\n\n// 1.\b第一种写法  过度时期的代码\n// fs.readFile('./package.json', (err, data) => {\n//     if (err) return console.log(err)\n//     data = JSON.parse(data)\n//     console.log(data.name)\n// })\n\n\n\n// 2.\b第二种写法  过度时期的代码\n\n// function readFileAsync(path) {\n//     return new Promise((resolve, reject) => {\n//         fs.readFile(path, (err, data) => {\n//             if (err) reject(err)\n//             else resolve(data)\n//         })\n//     })\n// }\n\n// readFileAsync('./package.json')\n//     .then(data => {\n//         data = JSON.parse(data)\n//         console.log(data.name)\n//     })\n//     .catch(err => {\n//         console.log(err)\n//     })\n\n\n// 3.\bnode8提供了util\nconst util = require('util')\n\n// 传入一个回调函数返回的是一个promise的fuc  fs.readFile是一个回调的异步函数\nutil.promisify(fs.readFile)('./package.json')\n    .then(JSON.parse)\n    .then(data => {\n        console.log(data.name)\n    })\n    .catch(err => {\n        console.log(err)\n    })"]}